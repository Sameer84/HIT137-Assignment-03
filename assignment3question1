import tkinter as tk

class Calculator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Calculator")
        self.geometry("300x400")
        self.result_var = tk.StringVar()
        
        self.create_widgets()
    
    def create_widgets(self):
        self.entry = tk.Entry(self, textvariable=self.result_var, font=("Arial", 18), justify="right")
        self.entry.grid(row=0, column=0, columnspan=4, padx=10, pady=10, sticky="nsew")
        
        buttons = [
            ("7", 1, 0), ("8", 1, 1), ("9", 1, 2), ("/", 1, 3),
            ("4", 2, 0), ("5", 2, 1), ("6", 2, 2), ("*", 2, 3),
            ("1", 3, 0), ("2", 3, 1), ("3", 3, 2), ("-", 3, 3),
            ("0", 4, 0), (".", 4, 1), ("=", 4, 2), ("+", 4, 3)
        ]
        
        for (text, row, column) in buttons:
            button = tk.Button(self, text=text, font=("Arial", 18), command=lambda t=text: self.on_button_click(t))
            button.grid(row=row, column=column, padx=5, pady=5, sticky="nsew")
        
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
    
    def on_button_click(self, text):
        if text == "=":
            self.calculate()
        elif text == "C":
            self.result_var.set("")
        else:
            current_text = self.result_var.get()
            self.result_var.set(current_text + text)
    
    def calculate(self):
        try:
            result = eval(self.result_var.get())
            self.result_var.set(str(result))
        except Exception as e:
            self.result_var.set("Error")

if __name__ == "__main__":
    app = Calculator()
    app.mainloop()
#Explanation of object-oriented programming concepts used in the code:

    #Multiple Inheritance: In this code, Calculator class is inheriting from tk.Tk, thus utilizing multiple inheritance.
    #Encapsulation: Encapsulation is achieved through the use of instance variables (self.result_var) and methods that operate on them (create_widgets, on_button_click, calculate). These variables and methods are encapsulated within the Calculator class.
    #Polymorphism: Polymorphism is demonstrated in the on_button_click method where the behavior of the method varies depending on the input argument text.
    #Method Overriding: The __init__ method is overridden to provide custom initialization behavior for the Calculator class, extending the behavior of the superclass tk.Tk. Similarly, create_widgets, on_button_click, and calculate methods are overridden to provide custom functionality within the Calculator class.

